#!/bin/bash

# Docker Test Runner for CourtListener MCP
# Tests MCP server running in Docker container

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🐳 Docker MCP Integration Test Suite${NC}"
echo "====================================="

# Check prerequisites
check_prerequisites() {
    echo -e "${BLUE}🔍 Checking Prerequisites${NC}"
    
    # Check Docker
    if ! command -v docker >/dev/null 2>&1; then
        echo -e "${RED}❌ Docker not found${NC}"
        exit 1
    fi
    echo -e "✅ Docker: $(docker --version | head -n1)"
    
    # Check Docker Compose
    if ! command -v docker-compose >/dev/null 2>&1 && ! docker compose version >/dev/null 2>&1; then
        echo -e "${RED}❌ Docker Compose not found${NC}"
        exit 1
    fi
    echo -e "✅ Docker Compose available"
    
    # Check .env file
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}⚠️  .env file not found, creating from example${NC}"
        if [ -f ".env.example" ]; then
            cp .env.example .env
            echo -e "${YELLOW}   Please edit .env and set COURTLISTENER_API_TOKEN${NC}"
        fi
    fi
    
    # Check Ollama (if specified)
    local ollama_host=${OLLAMA_HOST:-"http://localhost:11434"}
    echo -e "🔗 Testing Ollama at: $ollama_host"
    
    if curl -s "$ollama_host/api/tags" >/dev/null 2>&1; then
        echo -e "✅ Ollama accessible"
    else
        echo -e "${YELLOW}⚠️  Ollama not accessible at $ollama_host${NC}"
        echo -e "   Tests will skip Ollama integration"
    fi
    
    echo ""
}

# Build test image
build_test_image() {
    echo -e "${BLUE}🏗️  Building Test Image${NC}"
    docker build -t courtlistener-mcp:test .
    echo -e "✅ Test image built"
    echo ""
}

# Run Docker integration tests
run_docker_tests() {
    echo -e "${BLUE}🧪 Running Docker Integration Tests${NC}"
    
    # Clean up any existing test containers
    docker rm -f courtlistener-mcp-test >/dev/null 2>&1 || true
    
    # Run the Docker integration tests
    npm run test:docker-integration
    
    echo ""
}

# Run full test suite with Docker Compose
run_compose_tests() {
    echo -e "${BLUE}🎼 Running Docker Compose Tests${NC}"
    
    # Clean up
    docker-compose -f docker-compose.test.yml down --remove-orphans >/dev/null 2>&1 || true
    
    # Build and run tests
    docker-compose -f docker-compose.test.yml up --build --profile test-runner
    
    # Clean up after tests
    docker-compose -f docker-compose.test.yml down --remove-orphans
    
    echo ""
}

# Cleanup function
cleanup() {
    echo -e "${BLUE}🧹 Cleaning Up${NC}"
    docker rm -f courtlistener-mcp-test >/dev/null 2>&1 || true
    docker-compose -f docker-compose.test.yml down --remove-orphans >/dev/null 2>&1 || true
    echo -e "✅ Cleanup complete"
}

# Trap cleanup on exit
trap cleanup EXIT

# Main execution
case "${1:-all}" in
    "check")
        check_prerequisites
        ;;
    "build")
        check_prerequisites
        build_test_image
        ;;
    "test")
        check_prerequisites
        build_test_image
        run_docker_tests
        ;;
    "compose")
        check_prerequisites
        run_compose_tests
        ;;
    "all")
        check_prerequisites
        build_test_image
        run_docker_tests
        echo -e "${GREEN}🎉 All Docker tests passed!${NC}"
        ;;
    "help"|*)
        echo "Usage: $0 <command>"
        echo ""
        echo "Commands:"
        echo "  check    - Check prerequisites"
        echo "  build    - Build test Docker image"
        echo "  test     - Run Docker integration tests"
        echo "  compose  - Run full Docker Compose test suite"
        echo "  all      - Run all tests (default)"
        echo "  help     - Show this help"
        ;;
esac
